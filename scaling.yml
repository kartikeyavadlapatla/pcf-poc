resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:
- name: offhours-scaleup
  type: time
  source:
    start: ((start-time))
    stop: ((stop-time))
    days: ((days))
    location: America/New_York

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: pcf-automation-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_uri))
    branch: ((git_branch))

- name: pcf-automation-template-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_template_uri))
    branch: ((git_template_branch))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

jobs:
- name: Director-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
    - get: offhours-scaleup
      trigger: true
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: om-config-vm-extensions
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
      foundation: ((foundation))
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            if [ ${foundation} == non-prod ]
            then
            #### VM Instance profile #########
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/instance-role -x PUT -d \
              '{"name": "instance-role", "cloud_properties": { "iam_instance_profile": "PCF_Role-EC2"}}'
            ### VM Security Groups ########
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/web-lb-security-groups -x PUT -d \
              '{"name": "web-lb-security-groups", "cloud_properties": { "security_groups": ["sg-0ef74df3a77274c49"]}}'
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/ssh-lb-security-groups -x PUT -d \
              '{"name": "ssh-lb-security-groups", "cloud_properties": { "security_groups": ["sg-0ef74df3a77274c49"]}}'
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/tcp-lb-security-groups -x PUT -d \
              '{"name": "tcp-lb-security-groups", "cloud_properties": { "security_groups": ["sg-0ef74df3a77274c49"]}}'
            ### Custom VMs - service Instances
            elif [ ${foundation} == sandbox ]
            then
            #### VM Instance profile #########
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/instance-role -x PUT -d \
              '{"name": "instance-role", "cloud_properties": { "iam_instance_profile": "pcf_sandbox-instance-role"}}'
            ### VM Security Groups ########
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/web-lb-security-groups -x PUT -d \
              '{"name": "web-lb-security-groups", "cloud_properties": { "security_groups": ["sg-0e63f477c0e6b80ed"]}}'
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/ssh-lb-security-groups -x PUT -d \
              '{"name": "ssh-lb-security-groups", "cloud_properties": { "security_groups": ["sg-0e63f477c0e6b80ed"]}}'
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/tcp-lb-security-groups -x PUT -d \
              '{"name": "tcp-lb-security-groups", "cloud_properties": { "security_groups": ["sg-0e63f477c0e6b80ed"]}}'
            ### Custom VMs - service Instances
            elif [ ${foundation} == prod ]
            then
            #### VM Instance profile #########
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/instance-role -x PUT -d \
              '{"name": "instance-role", "cloud_properties": { "iam_instance_profile": "pcf_prod-instance-role"}}'
            ### VM Security Groups ########
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/web-lb-security-groups -x PUT -d \
              '{"name": "web-lb-security-groups", "cloud_properties": { "security_groups": ["sg-044e20152a4fad9f7"]}}'
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/ssh-lb-security-groups -x PUT -d \
              '{"name": "ssh-lb-security-groups", "cloud_properties": { "security_groups": ["sg-044e20152a4fad9f7"]}}'
              om --env env/"${ENV_FILE}" curl --path /api/v0/staged/vm_extensions/tcp-lb-security-groups -x PUT -d \
              '{"name": "tcp-lb-security-groups", "cloud_properties": { "security_groups": ["sg-044e20152a4fad9f7"]}}'
            ### Custom VMs - service Instances
            else
               echo "non foundation specified"
            fi
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/bosh-director-var.yml
      DIRECTOR_CONFIG_FILE: install-pcf/templates/((foundation))/bosh-director.yml
  - task: apply-change-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: PAS-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-Director]
    - get: offhours-scaleup
      trigger: true
      passed: [Director-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-pas
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/pas.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/pas-var.yml
  - task: Apply-Change-PAS
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              cf:
                deploy-autoscaler:
                  post-deploy-state: false
                deploy-notifications:
                  post-deploy-state: false
                deploy-notifications-ui:
                  post-deploy-state: false
                metric_registrar_smoke_test:
                  post-deploy-state: false
                nfsbrokerpush:
                  post-deploy-state: false
                push-apps-manager:
                  post-deploy-state: false
                push-usage-service:
                  post-deploy-state: false
                rotate_cc_database_key:
                  post-deploy-state: false
                smbbrokerpush:
                  post-deploy-state: false
                smoke_tests:
                  post-deploy-state: true
                test-autoscaling:
                  post-deploy-state: false
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n cf -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: AwsServiceBroker-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-PAS]
    - get: offhours-scaleup
      trigger: true
      passed: [PAS-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-aws-service-broker
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/aws-service-broker.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/aws-service-broker-var.yml
  - task: Apply-Change-AWS-Broker
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              aws-service-broker:
                delete-all:
                  pre-delete-state: true
                deploy-all:
                  post-deploy-state: true
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n aws-service-broker -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: Mysql-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-AwsServiceBroker]
    - get: offhours-scaleup
      trigger: true
      passed: [AwsServiceBroker-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-mysql
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/pivotal-mysql.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/pivotal-mysql-var.yml
  - task: Apply-Change-MYSQL
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              pivotal-mysql:
                delete-all-service-instances-and-deregister-broker:
                  pre-delete-state: true
                recreate-all-service-instances:
                  post-deploy-state: false
                register-broker:
                  post-deploy-state: false
                smoke-tests:
                  post-deploy-state: true
                upgrade-all-service-instances:
                  post-deploy-state: true
                validate-before-upgrade-instances:
                  post-deploy-state: true
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n pivotal-mysql -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: MetricStore-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-Mysql]
    - get: offhours-scaleup
      trigger: true
      passed: [Mysql-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-metrics-store
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/metric-store.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/metric-store-var.yml
  - task: Apply-Change-MetricStore
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              metric-store:
                metric-store-smoke-tests:
                  post-deploy-state: true
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n metric-store -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: CredhubBroker-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-MetricStore]
    - get: offhours-scaleup
      trigger: true
      passed: [MetricStore-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-credhub-broker
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/credhub-service-broker.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/credhub-service-broker-var.yml
  - task: Apply-Change-CredHub
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              credhub-service-broker:
                delete-all:
                  pre-delete-state: true
                deploy-all:
                  post-deploy-state: false
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n credhub-service-broker -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: Metrics-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-CredhubBroker]
    - get: offhours-scaleup
      trigger: true
      passed: [CredhubBroker-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-Metrics
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/appMetrics.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/appMetrics-var.yml
  - task: Apply-Change-AppMetrics
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              appMetrics:
                delete-space:
                  pre-delete-state: true
                migrate-route:
                  post-deploy-state: false
                push-app-metrics:
                  post-deploy-state: false
                smoke-test:
                  post-deploy-state: true
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n appMetrics -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: SpringCloud-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-Metrics]
    - get: offhours-scaleup
      trigger: true
      passed: [Metrics-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-Spring-cloud
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/p_spring-cloud-services.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/p_spring-cloud-services-var.yml
  - task: Apply-Change-SpringCloud
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              p_spring-cloud-services:
                destroy-brokers:
                  pre-delete-state: false
                register-brokers:
                  post-deploy-state: false
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n p_spring-cloud-services -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: HealthWatch-ScaleUp
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleUp-SpringCloud]
    - get: offhours-scaleup
      trigger: true
      passed: [SpringCloud-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-health-watch
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/p-healthwatch.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/p-healthwatch-var.yml
  - task: Apply-Change-HealthWatch
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > errands.yml <<EOL
            errands:
              p-healthwatch:
                cleanup:
                  pre-delete-state: true
                push-apps:
                  post-deploy-state: false
                smoke-tests:
                  post-deploy-state: true
                validate-expected-metrics:
                  post-deploy-state: true
            EOL
            om --env env/"${ENV_FILE}" apply-changes -n p-healthwatch -c errands.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
- name: ScaleUp-DataDog-Application-Monitoring
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleDown-SpringCloud]
    - get: offhours-scaleup
      trigger: true
      passed: [HealthWatch-ScaleUp]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-datadog-application-monitoring
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/datadog-application-monitoring.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/datadog-application-monitoring-var.yml
  - task: Apply-Change-DataDog-Application-Monitoring
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            om --env env/"${ENV_FILE}" apply-changes -n datadog-application-monitoring
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: ScaleUp-DataDog-Cluster-Monitoring
  serial_groups: [ScaleUp]
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      #passed: [ScaleDown-SpringCloud]
    - get: offhours-scaleup
      trigger: true
      passed: [ScaleUp-DataDog-Application-Monitoring]
  - task: create-env-file
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
    image: pcf-automation-image
    config:
      platform: linux
      outputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            cat > env.yml <<EOL
            ---
            target: https://${OPSMAN_TARGET}
            connect-timeout: 30            # default 5
            request-timeout: 1800          # default 1800
            skip-ssl-validation: true     # default false
            username: ${OPSMAN_USERNAME}
            password: ${OPSMAN_PASSWORD}
            decryption-passphrase: passphrase
            EOL
            ls
            cp env.yml env/env.yml
            cat env/env.yml
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-datadog-cluster-monitoring
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/((foundation))/datadog.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((scale_up))/datadog-var.yml
  - task: Apply-Change-DataDog-Cluster-Monitoring
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            om --env env/"${ENV_FILE}" apply-changes -n datadog-application-monitoring
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
