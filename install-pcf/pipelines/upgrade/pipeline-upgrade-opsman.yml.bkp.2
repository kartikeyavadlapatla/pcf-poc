s3_credentials: &s3_credentials
  bucket: ((storage-backup-bucket))
  region_name: ((storage-region))
  access_key_id: ((storage-access-key-id))
  secret_access_key: ((storage-secret-access-key))
  endpoint: ((storage-endpoint))

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:

- name: om-backup-artifact
  type: s3
  source:
    <<: *s3_credentials
    regexp: opsman-export/installation-(.*).zip

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: pcf-automation-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_uri))
    branch: ((git_branch))

- name: pcf-automation-template-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_template_uri))
    branch: ((git_template_branch))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

jobs:
- name: upgrade-opsman
  serial: true
  serial_groups: [ upgrade-opsman ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
        interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: create-env-file
    file: pipeline-utilities/tasks/create-om-env.yml
    params:
      OPSMAN_TARGET: ((opsman-private-ip))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: check-opsman-status
    image: pcf-automation-image
    params:
      ENV_FILE: auth.yml
    config:
      platform: linux
      inputs:
      - name: auth 
      run:
        path: bash
        args:
          - -c
          - |
            set -eux
            apt install jq -y
            status="$(om --env auth/"${ENV_FILE}" installations --format json | jq .[0].status)"
            trimmed_status="$(xargs <<< "$status")"
            if [ "$trimmed_status" == "running" ]; then
              echo "\"Apply Changes\" is in flight." | tee /dev/stderr
              exit 1
            fi
            echo "No \"Apply Changes\" in flight."
  - task: export-installation-settings
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/export-installation.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
      env: auth
    params:
      ENV_FILE: auth.yml
  - put: om-backup-artifact
    params:
      file: installation/installation-*.zip
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
        interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: create-opsman-from-yml
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      outputs:
      - name: generated-state
      params:
        access_key_id: ((access-key-id))
        secret_access_key: ((secret-access-key))
        opsman_subnet_id: ((opsman-subnet-id))
        opsman_image_id: ((opsman-image-id))
        opsman_instance_type: ((opsman-instance-type))
        opsman_ssh_key_name: ((opsman-ssh-key-name))
        opsman_security_group_id: ((opsman-security-group-id))
        opsman_iam_instance_profile: ((opsman-iam-instance-profile))
        opsman_root_VolumeSize: ((opsman-root-VolumeSize))
        opsman_private_ip: ((opsman-private-ip))
        aws_region: ((aws-region))
        foundation: ((foundation))
        STATE_FILE: ((foundation))/state/state.yml
      run:
        path: bash
        args:
        - -exc
        - |
          set -eux
          echo "Installing the aws cli"
          apt-get update > /dev/null 2>&1
          export DEBIAN_FRONTEND=noninteractive
          apt-get install awscli -yq vim  > /dev/null 2>&1
          export AWS_ACCESS_KEY_ID=$access_key_id
          export AWS_SECRET_ACCESS_KEY=$secret_access_key
          export AWS_DEFAULT_REGION=$aws_region
          
          echo "###turning off OpsMan###"

          id=$(aws ec2 describe-instances --filters \
          "Name=private-ip-address,Values='$opsman_private_ip'" \
          --instance-ids --query 'Reservations[*].Instances[*].{Instance:InstanceId}' --output text)
          
          echo "stopping $id"
          
          aws ec2 terminate-instances --instance-ids $id
          
          state=$(aws ec2 describe-instances --filters \
            "Name=private-ip-address,Values='$opsman_private_ip'" \
            --instance-ids --query 'Reservations[*].Instances[*].State.Name' --output text)

          until [ -z "$state" ]
          do
            sleep 5
            state=$(aws ec2 describe-instances --filters \
            "Name=private-ip-address,Values='$opsman_private_ip'" \
            --instance-ids --query 'Reservations[*].Instances[*].State.Name' --output text)
            echo $state
          done

          echo "###creating OpsMan ###"
          
          sleep 10

          aws ec2 run-instances \
            --subnet-id ${opsman_subnet_id} \
            --image-id ${opsman_image_id} \
            --instance-type ${opsman_instance_type} \
            --key-name ${opsman_ssh_key_name} \
            --security-group-ids ${opsman_security_group_id} \
            --iam-instance-profile "Name"="${opsman_iam_instance_profile}" \
            --private-ip-address ${opsman_private_ip} \
            --count 1  \
            --block-device-mappings "DeviceName="/dev/xvda","Ebs"={"VolumeSize"="${opsman_root_VolumeSize}","Encrypted"="true"}" \
            --tag-specifications "ResourceType="instance","Tags"=[{"Key"="Name","Value"="Opsman_${foundation}"}]"
          
          id=$(aws ec2 describe-instances --filters \
                 "Name=private-ip-address,Values='$opsman_private_ip'" --instance-ids \
                 --query 'Reservations[*].Instances[*].{Instance:InstanceId}' --output text)
          echo "###Creating State file#####"  
          cat > generated-state/state.yml <<EOL
          iaas: aws
          vm_id: $id
          EOL
          sleep 120
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: pcf-automation-image
          input_mapping:
            configuration: pcf-automation-git
          config:
            platform: linux
            inputs:
              - name: generated-state
              - name: configuration
            outputs:
              - name: configuration-commit
            run:
              path: bash
              args:
                - -c
                - |
                  set -eux
                  git clone -b ((git_branch)) configuration configuration-commit
                  cp generated-state/state.yml configuration-commit/install-pcf/state/((foundation))/state.yml
                  cd configuration-commit
                  git add -A
                  git config --global user.email "bot@example.com"
                  git config --global user.name "Friendly Neighborhood Bot"
                  git commit -m 'updated the state file' || true
        - put: pcf-automation-git
          params:
            repository: configuration-commit
            rebase: true
  - task: import-installtion-settings
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/import-installation.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
      env: auth
    params:
      ENV_FILE: auth.yml
  - task: apply-change-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
      env: auth
    params:
      ENV_FILE: auth.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: auth.yml
    config:
      platform: linux
      inputs:
      - name: auth 
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env auth/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
