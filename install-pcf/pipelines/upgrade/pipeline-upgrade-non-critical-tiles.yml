resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: pcf-automation-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_uri))
    branch: ((git_branch))

- name: pcf-automation-template-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_template_uri))
    branch: ((git_template_branch))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

- name: metrics-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    versioned_file: metrics_tiles/((metric-tile-name))

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    versioned_file: health_watch_tiles/((healthwatch-tile-name))

- name: credhub-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    versioned_file: credhub_tiles/((credhub-tile-name))

- name: metrics-store-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    versioned_file: metrics_store_tiles/((metric-store-tile-name))

jobs:
- name: export-installation-settings
  serial: true
  serial_groups: [ export-settings ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
        interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: create-env-file
    file: pipeline-utilities/tasks/create-om-env.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: export-installation-settings
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/export-installation.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
      env: auth
    params:
      ENV_FILE: auth.yml
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: pcf-automation-image
          input_mapping:
            configuration: pcf-automation-git
          config:
            platform: linux
            inputs:
              - name: installation
              - name: configuration
            outputs:
              - name: configuration-commit
            run:
              path: bash
              args:
                - -c
                - |
                  set -eux
                  git clone -b ((git_branch)) configuration configuration-commit
                  cp installation/installation*.zip configuration-commit/install-pcf/state/((foundation))/
                  cd configuration-commit
                  git add -A
                  git config --global user.email "bot@example.com"
                  git config --global user.name "Friendly Neighborhood Bot"
                  git commit -m 'updated the state file' || true
        - put: pcf-automation-git
          params:
            repository: configuration-commit
            rebase: true
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
        interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: auth.yml
    config:
      platform: linux
      inputs:
      - name: auth
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env auth/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-health-watch
  serial: true
  serial_groups: [ create-health-watch ]
  plan:
  - aggregate:
    - get: healthwatch-product
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ export-installation-settings ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-healthwatch
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: healthwatch-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-credhub
  serial: true
  serial_groups: [ create-credhub ]
  plan:
  - aggregate:
    - get: credhub-product
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ export-installation-settings ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-credhub
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: credhub-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-metrics
  serial: true
  serial_groups: [ create-metrics ]
  plan:
  - aggregate:
    - get: metrics-product
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ export-installation-settings ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-metrics
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: metrics-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-metrics-store
  serial: true
  serial_groups: [ create-store ]
  plan:
  - aggregate:
    - get: metrics-store-product
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ export-installation-settings ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-metrics
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: metrics-store-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-metric-store
  serial: true
  serial_groups: [ create-store ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ upload-and-stage-metrics-store ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-metrics-store
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/metric-store.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/metric-store-var.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-credhub-broker
  serial: true
  serial_groups: [ create-credhub ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ upload-and-stage-credhub ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-credhub-broker
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/credhub-service-broker.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/credhub-service-broker-var.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-Metrics
  serial: true
  serial_groups: [ create-metrics ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ upload-and-stage-metrics ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-Metrics
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/appMetrics.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/appMetrics-var.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-health-watch
  serial: true
  serial_groups: [ create-health-watch ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ upload-and-stage-health-watch ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-health-watch
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/p-healthwatch.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/p-healthwatch-var.yml
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: trigger-apply-changes
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed: [ configure-health-watch ]
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: apply-change-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
