resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: pcf-automation-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_uri))
    branch: ((git_branch))

- name: pcf-automation-template-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_template_uri))
    branch: ((git_template_branch))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
        interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /((foundation))
#  - task: put-opsman-froms3
#    config:
#      platform: linux
#      image_resource:
#        type: docker-image
#        source:
#          repository: ubuntu
#      outputs:
#      - name: pcf-vsphere
#      params:
#        access_key_id: ((access-key-id))
#        secret_access_key: ((secret-access-key))
#        opsman_subnet_id: ((opsman-subnet-id))
#        opsman_image_id: ((opsman-image-id))
#        opsman_instance_type: ((opsman-instance-type))
#        opsman_ssh_key_name: ((opsman-ssh-key-name))
#        opsman_security_group_id: ((opsman-security-group-id))
#        opsman_iam_instance_profile: ((opsman-iam-instance-profile))
#        opsman_root_VolumeSize: ((opsman-root-VolumeSize))
#        opsman_private_ip: ((opsman-private-ip))
#        aws_region: ((aws-region))
#        foundation: ((foundation))
#        STATE_FILE: ((foundation))/state/state.yml
#      run:
#        path: bash
#        args:
#        - -exc
#        - |
#          set -eux
#          echo "Installing the aws cli"
#          apt-get update > /dev/null 2>&1
#          export DEBIAN_FRONTEND=noninteractive
#          apt-get install awscli -yq vim  > /dev/null 2>&1
#          export AWS_ACCESS_KEY_ID=$access_key_id
#          export AWS_SECRET_ACCESS_KEY=$secret_access_key
#          export AWS_DEFAULT_REGION=$aws_region
#          aws ec2 run-instances \
#          --subnet-id ${opsman_subnet_id} \
#          --image-id ${opsman_image_id} \
#          --instance-type ${opsman_instance_type} \
#          --key-name ${opsman_ssh_key_name} \
#          --security-group-ids ${opsman_security_group_id} \
#          --iam-instance-profile "Name"="${opsman_iam_instance_profile}" \
#          --private-ip-address ${opsman_private_ip} \
#          --count 0  \
#          --block-device-mappings "DeviceName="/dev/xvda","Ebs"={"VolumeSize"="${opsman_root_VolumeSize}","Encrypted"="true"}" \
#          --tag-specifications "ResourceType="instance","Tags"=[{"Key"="Name","Value"="Opsman_${foundation}"}]"
  - task: creating-opsman-var
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      outputs:
      - name: vars
      params:
        pivnet_file_glob: ((pivnet-file-glob))
        product_version_regex: ((product-version-regex))
        pivnet_api_token: ((pivnet_token))
      run:
        path: bash
        args:
        - -exc
        - |
          set -eux
          echo "---" > var.yml
          echo "pivnet-file-glob: ${pivnet_file_glob}" >> var.yml
          echo "product-version-regex: ${product_version_regex}" >> var.yml
          echo "pivnet-api-token: ${pivnet_api_token}" >> var.yml
          cat var.yml
          cp var.yml vars/vars.yml
  - task: download-product        
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: install-pcf/templates/download-ops-manager.yml
      VARS_FILES: vars/vars.yml
    input_mapping:
      config: pcf-automation-git 
      platform-automation-tasks: pcf-automation-tasks
      vars: vars
  - task: create-vm
    image: pcf-automation-image
    file: pcf-automation-git/install-pcf/templates/create-vm.yml
    params:
      OPSMAN_CONFIG_FILE: install-pcf/config/sandbox/opsman-vars.yml
      AWS_ACCESS_KEY_ID: ((access-key-id))
      AWS_SECRET_ACCESS_KEY: ((secret-access-key))
      AWS_DEFAULT_REGION: ((aws-region))
    input_mapping:
      config: pcf-automation-git
      state: pcf-automation-git
      image: downloaded-product
      platform-automation-tasks: pcf-automation-git
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: pcf-automation-image
          input_mapping:
            configuration: pcf-automation-git
          config:
            platform: linux
            inputs:
              - name: generated-state
              - name: configuration
            outputs:
              - name: configuration-commit
            run:
              path: bash
              args:
                - -c
                - |
                  set -eu
                  git clone -b ((git_branch)) configuration configuration-commit
                  cp generated-state/state.yml configuration-commit/state/((foundation))/state.yml
                  cd configuration-commit
                  git add -A
                  git config --global user.email "bot@example.com"
                  git config --global user.name "Friendly Neighborhood Bot"
                  git commit -m 'updated the state file' || true
        - put: pcf-automation-git
          params:
            repository: configuration-commit
            rebase: true
