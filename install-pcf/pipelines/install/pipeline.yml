resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: pcf-automation-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_uri))
    branch: ((git_branch))

- name: pcf-automation-template-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_template_uri))
    branch: ((git_template_branch))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

- name: pas-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    regexp: pas_tiles/cf-2.5.0-build.297.pivotal

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
        interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
#  - task: put-opsman-froms3
#    config:
#      platform: linux
#      image_resource:
#        type: docker-image
#        source:
#          repository: ubuntu
#      outputs:
#      - name: pcf-vsphere
#      params:
#        access_key_id: ((access-key-id))
#        secret_access_key: ((secret-access-key))
#        opsman_subnet_id: ((opsman-subnet-id))
#        opsman_image_id: ((opsman-image-id))
#        opsman_instance_type: ((opsman-instance-type))
#        opsman_ssh_key_name: ((opsman-ssh-key-name))
#        opsman_security_group_id: ((opsman-security-group-id))
#        opsman_iam_instance_profile: ((opsman-iam-instance-profile))
#        opsman_root_VolumeSize: ((opsman-root-VolumeSize))
#        opsman_private_ip: ((opsman-private-ip))
#        aws_region: ((aws-region))
#        foundation: ((foundation))
#        STATE_FILE: ((foundation))/state/state.yml
#      run:
#        path: bash
#        args:
#        - -exc
#        - |
#          set -eux
#          echo "Installing the aws cli"
#          apt-get update > /dev/null 2>&1
#          export DEBIAN_FRONTEND=noninteractive
#          apt-get install awscli -yq vim  > /dev/null 2>&1
#          export AWS_ACCESS_KEY_ID=$access_key_id
#          export AWS_SECRET_ACCESS_KEY=$secret_access_key
#          export AWS_DEFAULT_REGION=$aws_region
#          aws ec2 run-instances \
#          --subnet-id ${opsman_subnet_id} \
#          --image-id ${opsman_image_id} \
#          --instance-type ${opsman_instance_type} \
#          --key-name ${opsman_ssh_key_name} \
#          --security-group-ids ${opsman_security_group_id} \
#          --iam-instance-profile "Name"="${opsman_iam_instance_profile}" \
#          --private-ip-address ${opsman_private_ip} \
#          --count 0  \
#          --block-device-mappings "DeviceName="/dev/xvda","Ebs"={"VolumeSize"="${opsman_root_VolumeSize}","Encrypted"="true"}" \
#          --tag-specifications "ResourceType="instance","Tags"=[{"Key"="Name","Value"="Opsman_${foundation}"}]"
  - task: creating-opsman-var
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      outputs:
      - name: opsvars
      params:
        pivnet_file_glob: ((pivnet-file-glob))
        product_version_regex: ((product-version-regex))
        pivnet_api_token: ((pivnet_token))
      run:
        path: bash
        args:
        - -exc
        - |
          set -eux
          echo "---" > var.yml
          echo "pivnet-file-glob: ${pivnet_file_glob}" >> var.yml
          echo "product-version-regex: ${product_version_regex}" >> var.yml
          echo "pivnet-api-token: ${pivnet_api_token}" >> var.yml
          cat var.yml
          cp var.yml opsvars/vars.yml
  - task: download-product        
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: install-pcf/templates/download-ops-manager.yml
      VARS_FILES: vars/vars.yml
    input_mapping:
      config: pcf-automation-git 
      platform-automation-tasks: pcf-automation-tasks
      vars: opsvars
  - task: create-vm
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/create-vm.yml
    params:
      OPSMAN_CONFIG_FILE: install-pcf/config/((foundation))/opsman-vars.yml
      VARS_FILES: vars/creds.yml
    input_mapping:
      config: pcf-automation-git
      state: pcf-automation-git
      image: downloaded-product
      platform-automation-tasks: pcf-automation-tasks
      vars: vars
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: pcf-automation-image
          input_mapping:
            configuration: pcf-automation-git
          config:
            platform: linux
            inputs:
              - name: generated-state
              - name: configuration
            outputs:
              - name: configuration-commit
            run:
              path: bash
              args:
                - -c
                - |
                  set -eux
                  git clone -b ((git_branch)) configuration configuration-commit
                  cp generated-state/state.yml configuration-commit/install-pcf/state/((foundation))/state.yml
                  cd configuration-commit
                  git add -A
                  git config --global user.email "bot@example.com"
                  git config --global user.name "Friendly Neighborhood Bot"
                  git commit -m 'updated the state file' || true
        - put: pcf-automation-git
          params:
            repository: configuration-commit
            rebase: true
  - task: create-auth-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      params:
        OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
        USERNAME: ((opsman-username))
        PASSWORD: ((opsman-password))
      outputs:
        - name: config
      run:
        path: sh
        args:
        - -exc
        - |
          touch config/auth.yml
          cat > config/auth.yml <<EOL
          ---
          username: $USERNAME
          password: $PASSWORD
          decryption-passphrase: $OPSMAN_DECRYPTION_PASSPHRASE
          EOL
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 20
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            #apt-get update
            #apt-get install ca-certificates
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-director 
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
      passed: [ install-opsman ]
      trigger: true
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ install-opsman ]
      trigger: true
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/bosh-director-var.yml
      DIRECTOR_CONFIG_FILE: install-pcf/templates/bosh-director.yml
  - task: apply-change-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            #apt-get update
            #apt-get install ca-certificates
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-pas
  serial: true
  serial_groups: [ pas ]
  plan:
  - aggregate:
    - get: pas-product
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
      #trigger: false 
    - get: pcf-automation-git
      passed: [ configure-director ]
      trigger: true
    - get: pcf-automation-template-git
    - get: pipeline-utilities
      passed:
      - configure-director
      trigger: true
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  #- task: put-pas-froms3
  #  config:
  #    platform: linux
  #    image_resource:
  #      type: docker-image
  #      source:
  #        repository: ubuntu
  #    outputs:
  #     - name: pas-product 
  #    params:
  #      bucket: ((storage-backup-bucket))
  #      access_key_id: ((storage-access-key-id))
  #      secret_access_key: ((storage-secret-access-key))
  #      endpoint: ((storage-endpoint))
  #      secret_access_key: ((storage-secret-access-key))
  #      endpoint: ((storage-endpoint))
  #      bucket_name: pas_tiles
  #      tile_name: ((pas-tile-name)) 
  #    run:
  #      path: bash
  #      args:
  #      - -exc
  #      - |
  #        set -eux
  #        echo "Installing the aws cli"
  #        apt-get update > /dev/null 2>&1
  #        export DEBIAN_FRONTEND=noninteractive
  #        apt-get install awscli -yq vim  > /dev/null 2>&1
  #        export AWS_ACCESS_KEY_ID=$access_key_id
  #        export AWS_SECRET_ACCESS_KEY=$secret_access_key
  #        ls  pas-product
  #        aws --endpoint-url=https://${endpoint} s3 cp s3://${bucket}/${bucket_name}/${tile_name} pas-product/ --no-verify-ssl
  #        aws --endpoint-url=https://${endpoint} s3 ls s3://${bucket}/${bucket_name}/ --no-verify-ssl
  - task: upload-and-stage-pas
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: pas-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            #apt-get update
            #apt-get install ca-certificates
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
