resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: pcf-automation-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_uri))
    branch: ((git_branch))

- name: pcf-automation-template-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_template_uri))
    branch: ((git_template_branch))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

- name: xenial-stemcell
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: xenial_stemcells_ubuntu/((xenial-stemcell-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: health-watch-stemcell
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: healthwatch_stemcells_ubuntu/((healthwatch-stemcell-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: pas-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: pas_tiles/((pas-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: metrics-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: metrics_tiles/((metric-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: mysql-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: mysqlv2_tiles/((mysqlv2-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)
   
- name: rabbitmq-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: rabbitmq_tiles/((rabbitmq-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: redis-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: redis_tiles/((redis-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: health_watch_tiles/((healthwatch-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: springcloud-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: spring_cloud_services_tiles/((springcloud-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: credhub-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: credhub_tiles/((credhub-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

- name: metrics-store-product
  type: s3
  source:
    access_key_id: ((access-key-id))
    bucket: ((storage-backup-bucket))
    region_name: us-east-1
    secret_access_key: ((sandbox-secret-access-key))
    #regexp: pas_tiles/cf-2.5.(.*).pivotal
    #regexp: pas_tiles/cf-2.5.0-build.297.pivotal
    versioned_file: metrics_store_tiles/((metric-store-tile-name))
    #regexp: pas_tiles/cf-2.5.0-build.(.*)

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
        interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: create-opsman-from-yml
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      outputs:
      - name: generated-state
      params:
        access_key_id: ((access-key-id))
        secret_access_key: ((secret-access-key))
        opsman_subnet_id: ((opsman-subnet-id))
        opsman_image_id: ((opsman-image-id))
        opsman_instance_type: ((opsman-instance-type))
        opsman_ssh_key_name: ((opsman-ssh-key-name))
        opsman_security_group_id: ((opsman-security-group-id))
        opsman_iam_instance_profile: ((opsman-iam-instance-profile))
        opsman_root_VolumeSize: ((opsman-root-VolumeSize))
        opsman_private_ip: ((opsman-private-ip))
        aws_region: ((aws-region))
        foundation: ((foundation))
        STATE_FILE: ((foundation))/state/state.yml
      run:
        path: bash
        args:
        - -exc
        - |
          set -eux
          echo "Installing the aws cli"
          apt-get update > /dev/null 2>&1
          export DEBIAN_FRONTEND=noninteractive
          apt-get install awscli -yq vim  > /dev/null 2>&1
          export AWS_ACCESS_KEY_ID=$access_key_id
          export AWS_SECRET_ACCESS_KEY=$secret_access_key
          export AWS_DEFAULT_REGION=$aws_region
          aws ec2 run-instances \
          --subnet-id ${opsman_subnet_id} \
          --image-id ${opsman_image_id} \
          --instance-type ${opsman_instance_type} \
          --key-name ${opsman_ssh_key_name} \
          --security-group-ids ${opsman_security_group_id} \
          --iam-instance-profile "Name"="${opsman_iam_instance_profile}" \
          --private-ip-address ${opsman_private_ip} \
          --count 1  \
          --block-device-mappings "DeviceName="/dev/xvda","Ebs"={"VolumeSize"="${opsman_root_VolumeSize}","Encrypted"="true"}" \
          --tag-specifications "ResourceType="instance","Tags"=[{"Key"="Name","Value"="Opsman_${foundation}"}]"
          id=$(aws ec2 describe-instances --filters 'Name=private-ip-address,Values=10.65.16.10' --instance-ids --query 'Reservations[*].Instances[*].{Instance:InstanceId}' --output text)
          cat > generated-state/state.yml <<EOL
          iaas: aws
          vm_id: $id
          EOL
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: pcf-automation-image
          input_mapping:
            configuration: pcf-automation-git
          config:
            platform: linux
            inputs:
              - name: generated-state
              - name: configuration
            outputs:
              - name: configuration-commit
            run:
              path: bash
              args:
                - -c
                - |
                  set -eux
                  git clone -b ((git_branch)) configuration configuration-commit
                  cp generated-state/state.yml configuration-commit/install-pcf/state/((foundation))/state.yml
                  cd configuration-commit
                  git add -A
                  git config --global user.email "bot@example.com"
                  git config --global user.name "Friendly Neighborhood Bot"
                  git commit -m 'updated the state file' || true
        - put: pcf-automation-git
          params:
            repository: configuration-commit
            rebase: true
          #  - task: creating-opsman-var
          #config:
          #platform: linux
          #image_resource:
          #type: docker-image
          #source:
          # repository: ubuntu
          #outputs:
          #- name: opsvars
          #params:
          #pivnet_file_glob: ((pivnet-file-glob))
          #product_version_regex: ((product-version-regex))
          #pivnet_api_token: ((pivnet_token))
          #run:
          #path: bash
          #args:
          #- -exc
          #- |
          #set -eux
          #echo "---" > var.yml
          #echo "pivnet-file-glob: ${pivnet_file_glob}" >> var.yml
          #echo "product-version-regex: ${product_version_regex}" >> var.yml
          #echo "pivnet-api-token: ${pivnet_api_token}" >> var.yml
          #cat var.yml
          #cp var.yml opsvars/vars.yml
          #- task: download-product        
          #image: pcf-automation-image
          #file: pcf-automation-tasks/tasks/download-product.yml
          #params:
          #CONFIG_FILE: install-pcf/templates/download-ops-manager.yml
          #VARS_FILES: vars/vars.yml
          #input_mapping:
          #config: pcf-automation-git 
          #platform-automation-tasks: pcf-automation-tasks
          #vars: opsvars
          #- task: create-vm
          #image: pcf-automation-image
          #file: pcf-automation-tasks/tasks/create-vm.yml
          #params:
          #OPSMAN_CONFIG_FILE: install-pcf/config/((foundation))/opsman-vars.yml
          #VARS_FILES: vars/creds.yml
          #input_mapping:
          #config: pcf-automation-git
          #state: pcf-automation-git
          #image: downloaded-product
          #platform-automation-tasks: pcf-automation-tasks
          #vars: vars
          #ensure: &make-state-commit
          #do:
          #- task: make-commit
          #image: pcf-automation-image
          #input_mapping:
          #  configuration: pcf-automation-git
          #config:
          #  platform: linux
          #  inputs:
          #    - name: generated-state
          #    - name: configuration
          #  outputs:
          #    - name: configuration-commit
          #  run:
          #    path: bash
          #    args:
          #      - -c
          #      - |
          #        set -eux
          #        git clone -b ((git_branch)) configuration configuration-commit
          #        cp generated-state/state.yml configuration-commit/install-pcf/state/((foundation))/state.yml
          #        cd configuration-commit
          #        git add -A
          #        git config --global user.email "bot@example.com"
          #        git config --global user.name "Friendly Neighborhood Bot"
          #        git commit -m 'updated the state file' || true
        #- put: pcf-automation-git
        #  params:
        #    repository: configuration-commit
        #    rebase: true
  - task: create-auth-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      params:
        OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
        USERNAME: ((opsman-username))
        PASSWORD: ((opsman-password))
      outputs:
        - name: config
      run:
        path: sh
        args:
        - -exc
        - |
          touch config/auth.yml
          cat > config/auth.yml <<EOL
          ---
          username: $USERNAME
          password: $PASSWORD
          decryption-passphrase: $OPSMAN_DECRYPTION_PASSPHRASE
          EOL
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 20
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-director 
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
      passed: [ install-opsman ]
      trigger: true
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      trigger: true
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/bosh-director-var.yml
      DIRECTOR_CONFIG_FILE: install-pcf/templates/bosh-director.yml
  - task: apply-change-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: add-xenial-stemcell
  serial: true
  serial_groups: [ xenial-stemcells ]
  plan:
  - aggregate:
    - get: xenial-stemcell
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas, configure-director ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas, configure-director]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: xenial-stemcell
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: add-health-watch-stemcell
  serial: true
  serial_groups: [ xenial-stemcells ]
  plan:
  - aggregate:
    - get: health-watch-stemcell
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas, configure-director ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas, configure-director]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: health-watch-stemcell
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-pas
  serial: true
  serial_groups: [ pas ]
  plan:
  - aggregate:
    - get: pas-product
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-director ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-director ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-pas
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: pas-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-pas
  serial: true
  serial_groups: [ pas ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-pas
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-pas
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-pas
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/pas.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/pas-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-mysql
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: mysql-product
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-mysql
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: mysql-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
- name: upload-and-stage-rabbitmq
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: rabbitmq-product
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-rabbitmq
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: rabbitmq-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
- name: upload-and-stage-redis
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: redis-product
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-redis
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: redis-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
- name: upload-and-stage-healthwatch
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: healthwatch-product
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-healthwatch
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: healthwatch-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-springcloud
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: springcloud-product
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-springcloud
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: springcloud-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-credhub
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: credhub-product
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [  configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-credhub
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: credhub-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-metrics
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: metrics-product
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-metrics
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: metrics-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: upload-and-stage-metrics-store
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: metrics-store-product
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed: [ configure-pas ]
      trigger: true
    - get: pcf-automation-template-git
      passed: [ configure-pas ]
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: upload-and-stage-metrics
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: metrics-store-product
      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-mysql
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-mysql
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-mysql
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-mysql
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/pivotal-mysql.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/pivotal-mysql-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-metric-store
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-metrics-store
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-metrics-store
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-metrics-store
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/metric-store.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/metric-store-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-credhub-broker
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-credhub
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-credhub
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-credhub-broker
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/credhub-service-broker.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/credhub-service-broker-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-Metrics
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-metrics
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-metrics
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-Metrics
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/appMetrics.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/appMetrics-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-Spring-cloud
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-springcloud
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-springcloud
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-Spring-cloud
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/p_spring-cloud-services.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/p_spring-cloud-services-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-health-watch
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-healthwatch
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-healthwatch
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-health-watch
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/p-healthwatch.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/p-healthwatch-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-redis
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-redis
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-redis
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-redis
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/p-redis.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/p-redis-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions

- name: configure-rabbitmq
  serial: true
  serial_groups: [ tiles ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation
    - get: pcf-automation-git
      passed:
      - upload-and-stage-rabbitmq
      trigger: true
    - get: pcf-automation-template-git
      passed:
      - upload-and-stage-rabbitmq
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman-target))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
      OPSMAN_SKIP_SSL_VALIDATION: true
      OPSMAN_USERNAME: ((opsman-username))
      OPSMAN_PASSWORD: ((opsman-password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman-decryption-passphrase))
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
      platform-automation-tasks: pcf-automation-tasks
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/((foundation))
  - task: configure-rabbitmq
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: pcf-automation-git
      platform-automation-tasks: pcf-automation-tasks
    params:
      CONFIG_FILE: install-pcf/templates/p-rabbitmq.yml
      VARS_FILES: |
        vars/creds.yml
        config/install-pcf/config/((foundation))/p-rabbitmq-var.yml
#  - task: apply-change-director
#    image: pcf-automation-image
#    file: pcf-automation-tasks/tasks/apply-director-changes.yml
#    input_mapping:
#      platform-automation-tasks: pcf-automation-tasks
  - task: logout-of-opsmanger
    image: pcf-automation-image
    params:
      ENV_FILE: env.yml
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: bash
        args:
          - -c
          - |
            set -ex
            om --env env/"${ENV_FILE}" curl -x DELETE --path /api/v0/sessions
