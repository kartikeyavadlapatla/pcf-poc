resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: ((platform_automation_version))
    sort_by: semver

- name: pcf-automation-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_uri))
    branch: ((git_branch))

- name: pcf-automation-template-git
  type: git
  source:
    private_key: ((git_private_key))
    uri: ((git_template_uri))
    branch: ((git_template_branch))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
        globs:
        - platform-automation-tasks-*
      resource: platform-automation-pivnet
    - get: pcf-automation-image
      params:
        unpack: true
        globs:
        - platform-automation-image-*
      resource: platform-automation-pivnet
    - get: pcf-automation-git
    - get: pcf-automation-template-git
    - get: pipeline-utilities
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: pcf-automation-template-git
    output_mapping:
      interpolated-files: vars
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /((foundation))
  - task: put-opsman-froms3
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      outputs:
      - name: pcf-vsphere
      params:
        access_key_id: ((access-key-id))
        secret_access_key: ((secret-access-key))
        opsman-subnet-id: ((opsman-subnet-id))
        opsman-image-id: ((opsman-image-id))
        opsman-instance-type: ((opsman-instance-type))
        opsman-ssh-key-name: ((opsman-ssh-key-name))
        opsman-security-group-id: ((opsman-security-group-id))
        opsman-iam-instance-profile: ((opsman-iam-instance-profile))
        opsman-root-VolumeSize: ((opsman-root-VolumeSize))
        opsman-private-ip: ((opsman-private-ip))
      run:
        path: bash
        args:
        - -exc
        - |
          set -eux
          echo "Installing the aws cli"
          apt-get update > /dev/null 2>&1
          export DEBIAN_FRONTEND=noninteractive
          apt-get install awscli -yq vim  > /dev/null 2>&1
          export AWS_ACCESS_KEY_ID=$access_key_id
          export AWS_SECRET_ACCESS_KEY=$secret_access_key
          aws ec2 run-instances \
          --subnet-id ${opsman-subnet-id} \
          --image-id ${opsman-image-id} \
          --instance-type ${opsman-instance-type} \
          --key-name ${opsman-ssh-key-name} \
          --security-group-ids ${opsman-security-group-id} \
          --iam-instance-profile "Name"=${opsman-iam-instance-profile} \
          --private-ip-address ${opsman-private-ip} \
          --count 1  \
          --block-device-mappings "DeviceName"="/dev/xvda","Ebs"={"VolumeSize"=$opsman-root-VolumeSize,"Encrypted"="true"}
